#include <SoftwareSerial.h>
#include <Process.h>

// Communication WiFi entre Arduino et Moniteur sur le PC
// Remplace Serial
#include <Console.h>

// Communication série avec le lecteur RFID via ports analogiques standards
SoftwareSerial rfid(8, 9); // special YUN
// Communication avec le processeur sous Linino
Process sendUIDprocess;

int counter = 0;
int etat = 0;

// Commande Arduino ­­> RFID reader
byte MF_GET_SNR[] = {0xAA, 0x00, 0x03, 0x25, 0x26, 0x00, 0x00, 0xBB};
// Reponse RFID reader ­­> Arduino
byte rfidResponse[255];
int readerStatusByte = 3; //statutOK=ReponseCorrecte
int RFIDstartByte = 5;
int RFIDstopByte = 8;
byte statusOK = 0x00;
byte rfidEndText = 0xBB;
String strUID;

// LED
const int letVerte = 2;
const int ledRouge = 3;
const int switch1Pin = 5;    // switch input 1
//int resetRFIDbaudrate = 7;

void setup() {
  // Si nécessaire RESET du baudrate
  //pinMode(resetRFIDbaudrate, OUTPUT);
  //digitalWrite(resetRFIDbaudrate, LOW);
  pinMode(letVerte, OUTPUT);
  pinMode(ledRouge, OUTPUT);
  pinMode(switch1Pin, INPUT);
  Bridge.begin();  //communicationavecleprocesseurLinino
  Console.begin();  // Communication WiFi YUN­Moniteur sur PC
  rfid.begin(9600); // communication série avec lecteur RFID
}

void loop() {
  //digitalWrite(letVerte, HIGH);
  //digitalWrite(ledRouge, HIGH);
  Console.println("READ>>>>>>>>>>>>>>>");
  // Envoi de la commande MF_GET_SNR
  for (counter = 0 ; counter < 8 ; counter++) {
    rfid.write(MF_GET_SNR[counter]);
  }
  // Réception réponse
  counter = 0;
  while (rfid.available()) {
    rfidResponse[counter] = rfid.read();
    counter++;
  }
  afficheUID();
  //Teste s'il y a eu détection de tag, status = 0x00
  if ((rfidResponse[readerStatusByte] == statusOK)) {
    if (digitalRead(switch1Pin) == HIGH) {
      digitalWrite(letVerte, HIGH);   // set leg 1 of the H-bridge low
      digitalWrite(ledRouge, LOW);  // set leg 2 of the H-bridge high
      etat = 1;
    }
    else {
      digitalWrite(letVerte, LOW);   // set leg 1 of the H-bridge low
      digitalWrite(ledRouge, HIGH);   // set leg 2 of the H-bridge low
      etat = 2;
    }
    tone(4, 8);
    delay(500);
    noTone(4);
    digitalWrite(letVerte, LOW);
    digitalWrite(ledRouge, LOW);
    //UID a envoyer
    strUID = "";
    for (counter = RFIDstartByte; counter <= RFIDstopByte; counter++) {
      strUID += (String) rfidResponse[counter];
    }
    Console.println(strUID);
    Serial.println(strUID);

    
    //Extraire
    strUID = strUID.substring(0,6);

    
    Serial.println(strUID);
    sendUID();
  }
  delay(1000);
}

void sendUID() {
  // Commande curl pour envoyer l'UID au serveur
  sendUIDprocess.begin("curl");
  sendUIDprocess.addParameter("http://raphaelmaury.fr/iot/sendscan.php?Id=" + strUID + "&Etat=" + etat); // adresse IP du serveur
  sendUIDprocess.run(); // Lance la commande et attend la fin de l'éxécution
  // Affiche reponse serveur
  while (sendUIDprocess.available() > 0) {
    char c = sendUIDprocess.read();
    Console.print(c);
  }
  // Ensure the last bit of data is received
  Console.flush();
  Console.println();
}

void afficheUID() {
  int counter = 0;
  while (rfidResponse[counter] != rfidEndText) {
    Console.print(rfidResponse[counter], HEX); Console.print(' ');
    counter++;
  }
  Console.println();
}
